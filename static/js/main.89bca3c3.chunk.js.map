{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["languages","runSearch","term","lang","setter","a","console","log","fetch","encodeURIComponent","join","query","ok","json","results","Results","App","useState","search","setSearch","setLang","setResults","displayedLangs","setDisplayedLangs","className","map","l","key","type","checked","includes","onChange","e","target","index","indexOf","newLangs","splice","toUpperCase","action","onSubmit","event","preventDefault","value","autoFocus","itemLang","result","ID","name","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uOAeMA,G,MAAuB,CAAC,KAAM,KAAM,KAAM,O,SAEjCC,E,kFAAf,WAAyBC,EAAcC,EAAeC,GAAtD,iBAAAC,EAAA,6DACIC,QAAQC,IAAI,iBAAmBL,GADnC,SAGwBM,MAAM,sCAAwCL,EAC9D,WAAaM,mBAAmBP,GAChC,kCAAoCF,EAAUU,KAAK,WAL3D,WAGUC,EAHV,QAOeC,GAPf,0CAQe,GARf,uBAU0BD,EAAME,OAVhC,cAUUC,EAVV,yBAWWA,EAAQC,SAXnB,6C,sBAgFeC,MAjEf,WAAgB,IAAD,EACiBC,mBAAiB,IADlC,mBACJC,EADI,KACIC,EADJ,OAEaF,mBAAkB,MAF/B,mBAEJd,EAFI,KAEEiB,EAFF,OAGmBH,mBAAmB,IAHtC,mBAGJH,EAHI,KAGKO,EAHL,OAIiCJ,mBAAoB,CAAC,KAAM,OAJ5D,mBAIJK,EAJI,KAIYC,EAJZ,KAMX,OACI,yBAAKC,UAAU,OACVxB,EAAUyB,KAAI,SAACC,GACZ,OAAO,2BAAOC,IAAKD,GACf,2BAAOE,KAAK,WAAWC,QAASP,EAAeQ,SAASJ,GAAIK,SAAU,SAACC,GACnE,GAAIA,EAAEC,OAAOJ,QACJP,EAAeQ,SAASJ,IACzBH,EAAkB,GAAD,mBAAKD,GAAL,CAAqBI,SAEvC,CACH,IAAMQ,EAAQZ,EAAea,QAAQT,GACrC,GAAIQ,GAAS,EAAG,CACZ,IAAME,EAAQ,YAAOd,GACrBc,EAASC,OAAOH,EAAO,GACvBX,EAAkBa,QAI7BV,EAAEY,kBAIX,0BAAMC,OAAO,IAAIC,SAAQ,uCAAE,WAAOC,GAAP,eAAApC,EAAA,6DACvBoC,EAAMC,iBADiB,SAEDzC,EAAUiB,EAAQf,EAAMkB,GAFvB,QAEjBP,EAFiB,SAInBO,EAAWP,GAJQ,2CAAF,uDAOrB,2BAAOc,KAAK,SAASe,MAAOzB,EAAQa,SAAU,SAACU,GAC3CtB,EAAUsB,EAAMR,OAAOU,QACxBC,WAAW,IACd,4BAAQb,SAAU,SAACU,GACfrB,EAAQqB,EAAMR,OAAOU,QACtBA,MAAOxC,GACLH,EAAUyB,KAAI,SAACoB,GAAD,OACX,4BAAQlB,IAAKkB,EACLF,MAAOE,GACVA,EAASP,oBAK1B,6BACKxB,EAAQW,KAAI,SAACqB,GACV,OAAO,yBAAKnB,IAAKmB,EAAOC,IACpB,gCAASD,EAAOE,MADb,IAC4B,6BAC9B1B,EAAeG,KAAI,SAACC,GACjB,OAAO,0BAAMC,IAAKD,GACbA,EAAEY,cADA,IACgBQ,EAAO,QAAUpB,GADjC,IACqC,wCC3EpDuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5D,QAAQ4D,MAAMA,EAAMC,a","file":"static/js/main.89bca3c3.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\ninterface Result {\n    ID: string,\n    Icon: string,\n    Url: string,\n    Name: string,\n    Name_fr: string,\n    Name_de: string,\n    Name_ja: string,\n    Name_en: string\n}\n\ntype XivLang = \"en\" | \"fr\" | \"ja\" | \"de\";\nconst languages: XivLang[] = [\"en\", \"fr\", \"ja\", \"de\"];\n\nasync function runSearch(term: string, lang: XivLang, setter: (value: any) => void) {\n    console.log(\"Searching for \" + term);\n\n    const query = await fetch(\"https://xivapi.com/search?language=\" + lang +\n        \"&string=\" + encodeURIComponent(term) +\n        \"&columns=ID,Icon,Url,Name,Name_\" + languages.join(',Name_')\n    );\n    if (!query.ok) {\n        return false;\n    }\n    const results = await query.json();\n    return results.Results as Result[];\n}\n\n\nfunction App() {\n    const [search, setSearch] = useState<string>(\"\");\n    const [lang, setLang] = useState<XivLang>(\"en\");\n    const [results, setResults] = useState<Result[]>([]);\n    const [displayedLangs, setDisplayedLangs] = useState<XivLang[]>([\"en\", \"fr\"]);\n\n    return (\n        <div className=\"App\">\n            {languages.map((l) => {\n                return <label key={l}>\n                    <input type=\"checkbox\" checked={displayedLangs.includes(l)} onChange={(e) => {\n                        if (e.target.checked) {\n                            if (!displayedLangs.includes(l)) {\n                                setDisplayedLangs([...displayedLangs, l]);\n                            }\n                        } else {\n                            const index = displayedLangs.indexOf(l);\n                            if (index >= 0) {\n                                const newLangs = [...displayedLangs];\n                                newLangs.splice(index, 1);\n                                setDisplayedLangs(newLangs);\n                            }\n                        }\n                    }}/>\n                    {l.toUpperCase()}\n                </label>;\n            })}\n\n            <form action=\"#\" onSubmit={async (event) => {\n                event.preventDefault();\n                const results = await runSearch(search, lang, setResults);\n                if (results) {\n                    setResults(results);\n                }\n            }}>\n                <input type=\"search\" value={search} onChange={(event) => {\n                    setSearch(event.target.value);\n                }} autoFocus={true}/>\n                <select onChange={(event) => {\n                    setLang(event.target.value as XivLang);\n                }} value={lang}>\n                    {languages.map((itemLang) => (\n                        <option key={itemLang}\n                                value={itemLang}>\n                            {itemLang.toUpperCase()}\n                        </option>\n                    ))}\n                </select>\n            </form>\n            <div>\n                {results.map((result: any) => {\n                    return <div key={result.ID}>\n                        <strong>{result.name}</strong> <br/>\n                        {displayedLangs.map((l) => {\n                            return <span key={l}>\n                                {l.toUpperCase()} {result[\"Name_\" + l]} <br/>\n                            </span>;\n                        })}\n                    </div>;\n                })}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}